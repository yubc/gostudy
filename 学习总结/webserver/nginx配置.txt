#nginx进程数，建议设置为等于CPU总核心数。
worker_processes 8;
#更改worker进程的最大打开文件数限制
worker_rlimit_nofile 65535;
#全局错误日志定义类型，多个等级可并存，[ debug | info | notice | warn | error | crit ]，从左到右错误信息越来越少；此指令可以在全局、http、server、location块中配置）
error_log  logs/error.log  error;
#error_log  logs/error.log  info;
#Nginx进程文件
pid        logs/nginx.pid;


events {
    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。编译时会根据系统自动选择
    use epoll;
    #nginx收到一个新连接通知后接受尽可能多的连接
    multi_accept on; 
    #单个进程最大连接数（最大连接数=连接数*进程数）参照getconf PAGESIZE
    worker_connections 65535;
}


http {
    include       mime.types;
    default_type  application/json;
 
    charset utf-8;

	log_format  main    '{"@timestamp":"$time_iso8601",'
        '"host":"$server_addr",'
        '"clientip":"$remote_addr",'
        '"size":$body_bytes_sent,'
        '"responsetime":$request_time,'
        '"upstreamtime":"$upstream_response_time",'
        '"upstreamhost":"$upstream_addr",'
        '"domain":"$host",'
        '"url":"$uri",'
        '"xff":"$http_x_forwarded_for",'
        '"referer":"$http_referer",'
        '"user_agent":"$http_user_agent",'
        '"request":"$request",'
        '"status":"$status"}';
		
    access_log  logs/access.log  main;

    client_header_buffer_size 64m; #上传文件大小限制
    large_client_header_buffers 4 64k; #设定请求缓
    client_max_body_size 8m; #设定请求缓

    sendfile        on;
    #tcp_nopush     on;

    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。
    #autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。
    #server_tokens off; #关闭服务器版本号显示。

    tcp_nopush on; #防止网络阻塞
    tcp_nodelay on; #防止网络阻塞

    keepalive_timeout  65;

    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。
    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 64k;
    fastcgi_buffers 4 64k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 128k;

    #gzip模块设置
    gzip on; #开启gzip压缩输出
    gzip_min_length 1k; #最小压缩文件大小
    gzip_buffers 4 16k; #压缩缓冲区
    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5类似应用请使用1.0）
    gzip_comp_level 2; #压缩等级
    gzip_types text/plain application/x-javascript text/css application/xml;
    #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。
    gzip_vary on;
    #limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用

    upstream rrms.com {
        #ip_hash; ## 调度算法(默认轮询) #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weight参数表示权值，权值越高被分配到的几率越大。
        server localhost:20100 weight=3 max_fails=3 fail_timeout=15;
        #server localhost:9002 weight=3 max_fails=3 fail_timeout=15;
    }
    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        #location / {
        #    root   html;
        #    index  index.html index.htm;
        #}
	location / {
            proxy_pass http://rrms.com;  # 指向上面设置反向代理转发的服务器
            proxy_set_header   Host   $host;
            proxy_set_header   X-Real-IP $remote_addr;
	    #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
	}
	location /status {
	    stub_status on;
	    access_log off;
	    auth_basic "Private Property";
   	    auth_basic_user_file /etc/nginx/.htpasswd;
	}
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
	#图片缓存时间设置
        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
        {
            expires 10d;
        }
        #JS和CSS缓存时间设置
        location ~ .*\.(js|css)?$
        {
            expires 1h;
        }
	#所有静态文件由nginx直接读取不经过tomcat或resin
        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$
        { 
            expires 15d; 
        }
        #nginx禁止访问所有.开头的隐藏文件设置
        #location ~* /.* {
        #    deny all;
        #}
        #定义错误提示页面
        error_page   500 502 503 504 /50x.html;
            location = /50x.html {
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    server {
        listen       443 ssl;
        server_name  localhost;
   
        ssl_certificate      /usr/local/ybc/nginx.crt;
        ssl_certificate_key  /usr/local/ybc/nginx.key;
   
        ssl_session_cache    shared:SSL:10m;
        ssl_session_timeout  10m;
		ssl_session_tickets off;
   
		ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

       
		location /{
			proxy_pass http://rrms.com;  # 指向上面设置反向代理转发的服务器
				proxy_set_header   Host   $host;
				proxy_set_header   X-Real-IP $remote_addr;
				proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;	     
		}
    }


}